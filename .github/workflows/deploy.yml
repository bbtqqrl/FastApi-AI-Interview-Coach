name: Deploy to EC2

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        run: |
          docker build -t fastapi_ci-cd_app .
          docker tag fastapi_ci-cd_app:latest ${{ secrets.ECR_REGISTRY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}:latest

      - name: Prepare Files
        run: |
          echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
          mkdir -p certs
          echo "${{ secrets.JWT_PRIVATE_PEM }}" > certs/jwt-private.pem
          echo "${{ secrets.JWT_PUBLIC_PEM }}" > certs/jwt-public.pem

      - name: Upload to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env,certs,docker-compose.yml"
          target: "~/app"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app

            # Install docker compose plugin if needed
            if ! command -v docker compose &> /dev/null; then
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64 -o docker-compose
              chmod +x docker-compose
              sudo mv docker-compose ~/.docker/cli-plugins/docker-compose
            fi

            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            docker compose down || true
            docker compose pull
            docker compose up -d
