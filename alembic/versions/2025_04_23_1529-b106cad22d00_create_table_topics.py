"""create table topics

Revision ID: b106cad22d00
Revises: f7e2839435b7
Create Date: 2025-04-23 15:29:48.406011

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b106cad22d00'
down_revision: Union[str, None] = 'f7e2839435b7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('topics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('userresponses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('answer_text', sa.Text(), nullable=True),
    sa.Column('ai_feedback', sa.Text(), nullable=True),
    sa.Column('score', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('questions', sa.Column('topic_id', sa.UUID(), nullable=False))
    op.alter_column('questions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.drop_constraint('questions_session_id_fkey', 'questions', type_='foreignkey')
    op.create_foreign_key(None, 'questions', 'topics', ['topic_id'], ['id'])
    op.drop_column('questions', 'answer_text')
    op.drop_column('questions', 'ai_feedback')
    op.drop_column('questions', 'session_id')
    op.drop_column('questions', 'score')
    op.add_column('sessions', sa.Column('overall_score', sa.Integer(), nullable=True))
    op.add_column('sessions', sa.Column('overall_feedback', sa.Text(), nullable=True))
    op.alter_column('sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sessions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('sessions', 'overall_feedback')
    op.drop_column('sessions', 'overall_score')
    op.add_column('questions', sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('questions', sa.Column('ai_feedback', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('questions', sa.Column('answer_text', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'questions', type_='foreignkey')
    op.create_foreign_key('questions_session_id_fkey', 'questions', 'sessions', ['session_id'], ['id'])
    op.alter_column('questions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('questions', 'topic_id')
    op.drop_table('userresponses')
    op.drop_table('topics')
    # ### end Alembic commands ###
